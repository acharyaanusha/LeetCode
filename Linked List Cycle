# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
            
class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        try:
            slow = head
            fast = head.next
            while slow is not fast:
                slow = slow.next
                fast = fast.next.next
            return True
        except:
            return False
            
#Alternate

cur=head
        visited=set()
        while cur!=None:
            if cur not in visited:
                visited.add(cur)
            else:
                return True
            cur=cur.next
        return False
