# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findSize(self,head):
        ptr = head
        c = 0
        while ptr:
            ptr = ptr.next
            c +=1
        return c
    
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        size = self.findSize(head)
        def convert(l,r):
            nonlocal head
            if l>r:
                return None
            mid = (l+r)//2
            left = convert(l,mid-1)
            node = TreeNode(head.val)
            node.left = left
            head = head.next
            node.right = convert(mid+1,r)
            return node
        return convert(0,size-1)
