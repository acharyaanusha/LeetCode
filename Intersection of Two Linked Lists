# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if headA is None or headB is None:
            return None
        first = headA
        second = headB
        while first is not second:
            first=first.next
            second=second.next
            if first is second:
                return first
            if first is None:
                first=headB
            if second is None:
                second=headA
                
        return first
        
#BRUTE FORCE#
def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:

        elemSet = set()
        curr = headA
        
        while curr!=None:
            elemSet.add(curr)
            curr = curr.next
            
        curr = headB
        
        while curr!=None:
            if curr in elemSet:
                return curr
            curr = curr.next
            
        return None
