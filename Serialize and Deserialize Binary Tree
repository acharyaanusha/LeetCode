# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return None
        val = str(root.val)
        return ""+val+","+str(self.serialize(root.left))+","+str(self.serialize(root.right))

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not data:
            return None
        
        def recurse(queue):
            if queue[0]=="None":
                queue.pop(0)
                return None
            
            node = TreeNode(queue.pop(0))
            node.left = recurse(queue)
            node.right = recurse(queue)
            return node
        return recurse(data.split(","))
    
# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
